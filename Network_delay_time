#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAX_NODES 100

int n, k, adj[MAX_NODES][MAX_NODES], dist[MAX_NODES], visited[MAX_NODES];

void dijkstra() {
    // Initialize distances to infinity
    for (int i = 1; i <= n; i++) {
        dist[i] = INT_MAX;
        visited[i] = 0;
    }
    // Set distance to source node to 0
    dist[k] = 0;
    // Visit all nodes
    for (int i = 1; i <= n; i++) {
        // Find unvisited node with smallest distance
        int u = -1;
        for (int j = 1; j <= n; j++) {
            if (!visited[j] && (u == -1 || dist[j] < dist[u])) {
                u = j;
            }
        }
        // If all remaining nodes are unreachable, stop
        if (u == -1 || dist[u] == INT_MAX) {
            break;
        }
        // Mark node as visited
        visited[u] = 1;
        // Relax all adjacent nodes
        for (int v = 1; v <= n; v++) {
            if (adj[u][v] > 0 && dist[u] + adj[u][v] < dist[v]) {
                dist[v] = dist[u] + adj[u][v];
            }
        }
    }
}

int networkDelayTime(int** times, int timesSize, int* timesColSize, int k) {
    // Initialize adjacency matrix to 0
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            adj[i][j] = 0;
        }
    }
    // Add directed edges to adjacency matrix
    for (int i = 0; i < timesSize; i++) {
        int u = times[i][0], v = times[i][1], w = times[i][2];
        adj[u][v] = w;
    }
    // Find shortest paths from source node
    dijkstra();
    // Find maximum distance
    int max_dist = 0;
    for (int i = 1; i <= n; i++) {
        if (dist[i] == INT_MAX) {
            return -1;
        }
        if (dist[i] > max_dist) {
            max_dist = dist[i];
        }
    }
    return max_dist;
}

int main() {
    int times_arr[][3] = {{2,1,1},{2,3,1},{3,4,1}};
    int timesSize = sizeof(times_arr) / sizeof(times_arr[0]);
    int timesColSize = sizeof(times_arr[0]) / sizeof(times_arr[0][0]);
    int* times[timesSize];
    for (int i = 0; i < timesSize; i++) {
        times[i] = times_arr[i];
    }
    n = 4, k = 2;
    printf("Minimum time for all nodes to receive the signal: %d\n", networkDelayTime(times, timesSize, &timesColSize, k));
    return 0;
}
