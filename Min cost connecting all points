#include <stdio.h>
#include <stdlib.h>

// Definition for a point.
struct Point {
    int x;
    int y;
};

// Manhatten distance function
int manhattan(struct Point a, struct Point b) {
    return abs(a.x - b.x) + abs(a.y - b.y);
}

// Heap structure for sorting edges
struct Edge {
    int cost;
    int start;
    int end;
};

int cmp(const void* a, const void* b) {
    return (*(struct Edge*)a).cost - (*(struct Edge*)b).cost;
}

int find(int* parent, int i) {
    if (parent[i] == -1)
        return i;
    return find(parent, parent[i]);
}

void union_set(int* parent, int x, int y) {
    int xset = find(parent, x);
    int yset = find(parent, y);
    parent[xset] = yset;
}

int minCostConnect(struct Point* points, int pointsSize) {
    struct Edge edges[pointsSize * pointsSize];
    int num_edges = 0;

    // Create edges between all pairs of points
    for (int i = 0; i < pointsSize; i++) {
        for (int j = i+1; j < pointsSize; j++) {
            int cost = manhattan(points[i], points[j]);
            edges[num_edges].cost = cost;
            edges[num_edges].start = i;
            edges[num_edges].end = j;
            num_edges++;
        }
    }

    // Sort edges by cost
    qsort(edges, num_edges, sizeof(struct Edge), cmp);

    int parent[pointsSize];
    for (int i = 0; i < pointsSize; i++)
        parent[i] = -1;

    int min_cost = 0;
    for (int i = 0; i < num_edges; i++) {
        int start = edges[i].start;
        int end = edges[i].end;
        int cost = edges[i].cost;

        // Check if adding edge creates a cycle
        if (find(parent, start) != find(parent, end)) {
            union_set(parent, start, end);
            min_cost += cost;
        }
    }

    return min_cost;
}

int main() {
    struct Point points[3];
    points[0].x = 0;
    points[0].y = 0;
    points[1].x = 1;
    points[1].y = 1;
    points[2].x = 2;
    points[2].y = 2;

    int min_cost = minCostConnect(points, 3);
    printf("Minimum cost: %d\n", min_cost);
    
    return 0;
}
