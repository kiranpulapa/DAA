#include <stdio.h>
#include <stdlib.h>

typedef struct ListNode {
    int val;
    struct ListNode *next;
} ListNode;

ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
    if(l1 == NULL) {
        return l2;
    } else if(l2 == NULL) {
        return l1;
    } else if(l1->val < l2->val) {
        l1->next = mergeTwoLists(l1->next, l2);
        return l1;
    } else {
        l2->next = mergeTwoLists(l1, l2->next);
        return l2;
    }
}

ListNode* mergeKLists(ListNode** lists, int k) {
    if(k == 0) {
        return NULL;
    }

    // merge lists pairwise
    for(int i = 1; i < k; i *= 2) {
        for(int j = 0; j < k-i; j += 2*i) {
            lists[j] = mergeTwoLists(lists[j], lists[j+i]);
        }
    }

    return lists[0];
}

int main() {
    // create example linked lists
    ListNode* l1 = (ListNode*) malloc(sizeof(ListNode));
    l1->val = 1;
    l1->next = (ListNode*) malloc(sizeof(ListNode));
    l1->next->val = 4;
    l1->next->next = (ListNode*) malloc(sizeof(ListNode));
    l1->next->next->val = 5;
    l1->next->next->next = NULL;

    ListNode* l2 = (ListNode*) malloc(sizeof(ListNode));
    l2->val = 1;
    l2->next = (ListNode*) malloc(sizeof(ListNode));
    l2->next->val = 3;
    l2->next->next = (ListNode*) malloc(sizeof(ListNode));
    l2->next->next->val = 4;
    l2->next->next->next = NULL;

    ListNode* l3 = (ListNode*) malloc(sizeof(ListNode));
    l3->val = 2;
    l3->next = (ListNode*) malloc(sizeof(ListNode));
    l3->next->val = 6;
    l3->next->next = NULL;

    ListNode* lists[3] = {l1, l2, l3};
    int k = 3;

    ListNode* result = mergeKLists(lists, k);

    // print the merged linked list
    while(result != NULL) {
        printf("%d ", result->val);
        result = result->next;
    }

    return 0;
}
